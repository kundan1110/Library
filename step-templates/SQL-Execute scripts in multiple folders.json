{
  "Id": "ActionTemplates-21",
  "Name": "SQL - Execute Scripts Ordered Multiple Folders",
  "Description": "Given a path to a folder containing SQL scripts, this module will execute each script on the database server and catalog provided.  It will execute them in order based on their name.",
  "ActionType": "Octopus.Script",
  "Version": 10,
  "CommunityActionTemplateId": null,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "false",
    "Octopus.Action.Script.ScriptBody": "\n$paramContinueOnError = $OctopusParameters['ContinueOnError']\nif($paramContinueOnError -eq $null) { $paramContinueOnError = 'False' }\n\n$paramVersionRegEx = $OctopusParameters['VersionRegEx']\nif($paramVersionRegEx -eq $null) { $paramVersionRegEx = 'Release(\\d+)_(\\d+)\\.' }\n\n$paramPathToScripts = $OctopusParameters['PathToScripts'] \nif($paramPathToScripts -eq $null) { throw \"*** Path to scrips must be defined.\" }\n\n$paramCommandTimeout = $OctopusParameters['CommandTimeout'] \nif($paramCommandTimeout -eq $null) { $paramCommandTimeout = '0' }\n\n$paramConnectionString = $OctopusParameters['ConnectionString']\nif($paramConnectionString -eq $null) { throw \"*** Connection string must be defined.\" }\n\n$continueOnError = $paramContinueOnError.ToLower() -eq 'true'\n\n$connection = New-Object System.Data.SqlClient.SqlConnection\n$connection.ConnectionString = $paramConnectionString\n\nRegister-ObjectEvent -inputobject $connection -eventname InfoMessage -action {\n    write-host $event.SourceEventArgs\n} | Out-Null\n\nfunction Execute-SqlQuery($fileName) \n{\n    Write-Host \"Executing scripts in file '$fileName'\"\n\n    $content = gc $fileName -raw\n    $queries = [System.Text.RegularExpressions.Regex]::Split($content, '\\r\\n\\s*GO\\s*\\r\\n', [System.Text.RegularExpressions.RegexOptions]::IgnoreCase) | ? { $_ -ne '' }\n\n    foreach($q in $queries)\n    {\n        if ((-not [String]::IsNullOrWhiteSpace($q)) -and ($q.Trim().ToLowerInvariant() -ne \"go\")) \n        {   \n            $command = $connection.CreateCommand()\n            $command.CommandText = $q\n            $command.CommandTimeout = $paramCommandTimeout\n            $command.ExecuteNonQuery() | Out-Null\n        }\n    }\n}\n\ntry \n{\n    Write-Host \"Executing scripts in folder '$paramPathToScripts'\"\n\n    Write-Host \"Sorting script files based on regular expression '$paramVersionRegEx'\"\n    \n    Write-Host \"Opening SQL server connection...\"\n    $connection.Open()\n\n    $dirs = Get-ChildItem $paramPathToScripts -Recurse | Where-Object {$_.PsIsContainer}\n\n    if($dirs -ne $null)\n    {\n        foreach($dir in $dirs)\n        {\n             Get-ChildItem $dir.FullName *.sql | \n        % { \n            new-object psobject -Property @{ \"File\"=$_}\n          } | \n          \n          % {\n              #Write-Host \"Executing scripts in folder '$dir'\"\n             Execute-SqlQuery -fileName $_.File.FullName\n            }\n         }\n     }\n}\ncatch \n{\n\tif ($continueOnError) \n\t{\n\t\tWrite-Host $_.Exception.Message\n\t}\n\telse \n\t{\n\t\tthrow\n\t}\n}\nfinally \n{\n    Write-Host \"Closing connection.\"\n    $connection.Dispose()\n}\n",
    "Octopus.Action.Script.ScriptFileName": null,
    "Octopus.Action.Package.FeedId": null,
    "Octopus.Action.Package.PackageId": null
  },
  "Parameters": [
    {
      "Id": "d7ce450c-981f-45e6-8536-9682c833e1d0",
      "Name": "ConnectionString",
      "Label": "Connection String",
      "HelpText": "Connection string for the SQL connection. Example:\n\nServer=.\\SQLExpress;Database=OctoFX;Integrated Security=True;\n\nBind to a variable to provide different values for different environments.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "e35efdc0-b351-448a-b6f0-ab2f5af84549",
      "Name": "ContinueOnError",
      "Label": "Continue On Error",
      "HelpText": "If set to true, an error with the SQL statement will simply write to the log and not cause an error in the deployment.",
      "DefaultValue": "\"False\"",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "2aac72b1-4ed9-407b-8168-424cb36373b2",
      "Name": "CommandTimeout",
      "Label": "Individual Go Timeout",
      "HelpText": "Each individual go statements timeout value in seconds.\n\nA value of 0 indicates no limit (an attempt to execute a command will wait indefinitely).",
      "DefaultValue": "0",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "e72d1371-a65f-45a3-93e9-bd1027ce79c4",
      "Name": "PathToScripts",
      "Label": "Path to Script Files",
      "HelpText": "The path to the SQL script files you wish to execute.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "6e8a8ec7-0d81-4033-8cd1-bd3b2dc6ae94",
      "Name": "VersionRegEx",
      "Label": "Filename Version Reg Ex",
      "HelpText": "The regular expression to extract major and minor version number from file name.  Given Release2_61.sql, use \"Release(\\d+)\\_(\\d+)\\\\.\".",
      "DefaultValue": "Release(\\d+)_(\\d+)\\.",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    }
  ],
  "$Meta": {
    "ExportedAt": "2017-11-28T21:18:39.896Z",
    "OctopusVersion": "3.17.14",
    "Type": "ActionTemplate"
  }
}